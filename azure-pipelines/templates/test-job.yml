jobs:
- job: Test_Go
  pool: 
    name: Azure Pipelines
    vmImage: $(VmImage)
  steps:
  - checkout: self
    submodules: true

  - task: PowerShell@2
    displayName: Fully cleanup the toolcache directory before testing
    inputs:
      targetType: filePath
      filePath: helpers/clean-toolcache.ps1
      arguments: -ToolName "go"

  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'current'
      artifact: 'go-$(Version)-$(Platform)-$(Architecture)'
      path: $(Build.ArtifactStagingDirectory)

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/go-$(Version)-$(Platform)-$(Architecture).*'
      destinationFolder: $(Build.BinariesDirectory)
      cleanDestinationFolder: false

  - task: PowerShell@2
    displayName: 'Apply build artifact to the local machines'
    inputs:
      targetType: inline
      script: |
        if ("$(Platform)" -match 'win32') { powershell ./setup.ps1 } else { sh ./setup.sh }
      workingDirectory: '$(Build.BinariesDirectory)'

  - task: GoTool@0
    inputs:
      version: '1.14.4'
      
  # - task: PowerShell@2
  #   displayName: 'Set up GO_ROOT'
  #   inputs:
  #     TargetType: inline
  #     script: |
  #       $GoToolcachePath = Join-Path -Path $env:AGENT_TOOLSDIRECTORY -ChildPath "go"
  #       $GoToolcacheVersionPath = Join-Path -Path $GoToolcachePath -ChildPath "$(Version)"
  #       $goDirectory = Join-Path $GoToolcacheVersionPath "$(Architecture)"
  #       $BIN_PATH = Join-Path -Path $goDirectory -ChildPath "bin"
  #       Write-Host "GOROOT = ${goDirectory}"
  #       Write-Host "BIN_PATH = ${BIN_PATH}"
  #       Write-Host "##vso[task.setvariable variable=GOROOT]${goDirectory}"
  #       Write-Host "##vso[task.setvariable variable=PATH;]${env:PATH};$BIN_PATH";

  - task: PowerShell@2
    displayName: 'Run tests'
    inputs:
      TargetType: inline
      script: |
        Install-Module Pester -Force -Scope CurrentUser -RequiredVersion 4.10.1
        Import-Module Pester
        $pesterParams = @{
          Path="./Go.Tests.ps1";
          Parameters=@{
            Version="$(Version)";
          }
        }
        Invoke-Pester -Script $pesterParams -OutputFile "test_results.xml" -OutputFormat NUnitXml
      workingDirectory: '$(Build.SourcesDirectory)/tests'

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    inputs:
      testResultsFiles: '*.xml'
      testResultsFormat: NUnit
      searchFolder: 'tests'
      failTaskOnFailedTests: true
      testRunTitle: "Go $(Version)-$(Platform)"
    condition: always()
